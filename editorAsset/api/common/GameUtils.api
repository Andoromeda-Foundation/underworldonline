/**
 * 针对游戏相关的工具
 * Created by 黑暗之神KDS on 2018-08-08 21:12:53.
 */
class GameUtils {
    //------------------------------------------------------------------------------------------------------
    // 朝向计算
    //------------------------------------------------------------------------------------------------------
    /**
     * 获取实际资源的面向
     * @param ori 面向 
     * @param oriMode [可选] 默认值=8 
     * @return [number] 
     */
    static getAssetOri(ori: number, oriMode: number = 8): number {
        return null;
    }
    /**
     * 根据0-360角度获取对应的面向
     * @param angle 角度
     * @return [number] 
     */
    static getOriByAngle(angle: number): number {
        return null;
    }
    /**
     * 根据面向获取0-360度
     * @param ori 面向
     * @return [number] 角度 
     */
    static getAngleByOri(ori: number): number {
        return null;
    }
    /**
     * 获取相反的面向
     */
    static getFlipOri(ori: number): number {
        return null;
    }
    //------------------------------------------------------------------------------------------------------
    // 坐标换算
    //------------------------------------------------------------------------------------------------------
    /**
     * [实际坐标]->[格子坐标]
     * @param p 实际坐标
     * @param helpP [可选] 默认值=null 如果存在则使用该对象来自装载而非创建新的Point对象
     * @return [Point] 格子坐标
     */
    static getGridPostion(p: Point, helpP: Point = null): Point {
        return null;
    }
    /**
     * [实际坐标]->[实际坐标中心点]
     * @param p 实际坐标
     * @param helpP [可选] 默认值=null 如果存在则使用该对象来自装载而非创建新的Point对象
     * @return [Point] 
     */
    static getGridCenter(p: Point, helpP: Point = null): Point {
        return null;
    }
    //------------------------------------------------------------------------------------------------------
    // 格子计算
    //------------------------------------------------------------------------------------------------------
    /**
     * 计算两点间是否存在障碍 穷举法
     * @param scene 
     * @return [boolean] 
     */
    static twoPointHasObstacle(x_x1, x_y1, x_x2, x_y2, scene: Scene, except: SceneObject = null): boolean {
        return null;
    }
    /**
     * 查询临近的同状态路径
     * @param mapData 图数据
     * @param gridX 起点格子
     * @param gridY 起点格子
     * @param width 总宽度
     * @param height 总高度
     * @param attributes 判断格子状态相同的属性集，即与mapData数据中的有一种属性不同的话也视为不同的状态 null 则表示直接对比
     * @param limit 默认值=100 限制搜索仅在周围limit距离的正方形范围内
     * @return [Point] 
     */
    static getSameStateGrid(mapData: any[][], gridX: number, gridY: number, width: number, height: number, attributes: string[], limit: number = 100): Point[] {
        return null;
    }
    /**
     * 获取两个格子之间的补间格子 穷举法
     */
    static getMendingGrids(grid1: Point, grid2: Point, per: number = 0.1): Point[] {
        return null;
    }
    //------------------------------------------------------------------------------------------------------
    // 其他
    //------------------------------------------------------------------------------------------------------
    /**
     * 获取最小适配比例
     * @param rect 
     * @param canvasRect 画布矩形
     */
    static getAutoFitSizePre(rect: Rectangle, canvasRect: Rectangle): number {
        return null;
    }
    /**
     * 判断继承于某个节点
     * @param node 
     * @param parentNode 
     */
    static isInheritNode(node: any, parentNode: any) {
        return null;
    }
    /**
     * 返回树节点的全节点（还包含根节点）
     * @param node 根节点
     * @param arr [可选] 默认值=null 
     * @return [any] 
     */
    static getAllChildren(node: any, arr: any[] = null): any[] {
        return null;
    }
    /**
     * 根据特定字符串$n来获取n，不符合的返回0
     * @param value 
     */
    static getVarID(value: string) {
        return null;
    }
    /**
     * 是否合法的变量名
     */
    static isLegalVarName(varName: string): boolean {
        return null;
    }
}
/**
 * <code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。
 */
class Point {
    /**临时使用的公用对象。*/
    static TEMP: Point;
    static EMPTY: Point;
    /**该点的水平坐标。*/
    x: number;
    /**该点的垂直坐标。*/
    y: number;
    /**
     * 根据指定坐标，创建一个新的 <code>Point</code> 对象。
     * @param x	（可选）水平坐标。
     * @param y	（可选）垂直坐标。
     */
    constructor(x?: number, y?: number) { };
    /**
     * 将 <code>Point</code> 的成员设置为指定值。
     * @param	x 水平坐标。
     * @param	y 垂直坐标。
     * @return 当前 Point 对象。
     */
    setTo(x: number, y: number): Point { return null };
    /**
     * 计算当前点和目标点(x，y)的距离。
     * @param	x 水平坐标。
     * @param	y 垂直坐标。
     * @return	返回当前点和目标点之间的距离。
     */
    distance(x: number, y: number): number { return null };
    /**返回包含 x 和 y 坐标的值的字符串。*/
    toString(): string { return null };
    /**
     * 返回from-to两点中间的点
     */
    static interpolate(to: Point, from: Point, per: number): Point { return null }
    /**
     * 返回from-to两点中间的点
     * @param toX 
     * @param toY 
     * @param fromX 
     * @param fromY 
     * @param per 
     * @return [number] 
     */
    static interpolate2(toX: number,toY:number, fromX: number,fromY:number, per: number):number[]{return null;}
    /**
     * 返回from-to两点中间的距离
     * @param from 
     * @param to 
     * @return [number] 
     */
    static distance(from: Point, to: Point): number { return null };
    /**
     * 返回from-to两点中间的距离
     * @param fromX 起点X
     * @param fromY 起点Y
     * @param toX 到达点X
     * @param toY 到达点Y
     * @return [number] 
     */
    static distance2(fromX: number, fromY: number, toX: number, toY: number): number {return null;}
}
/**
 * <p><code>Rectangle</code> 对象是按其位置（由它左上角的点 (x, y) 确定）以及宽度和高度定义的区域。</p>
 * <p>Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。</p>
 */
class Rectangle {
    static EMPTY: Rectangle;
    /**全局临时的矩形区域，此对象用于全局复用，以减少对象创建*/
    static TEMP: Rectangle;
    /** 矩形左上角的 X 轴坐标。*/
    x: number;
    /** 矩形左上角的 Y 轴坐标。*/
    y: number;
    /** 矩形的宽度。*/
    width: number;
    /** 矩形的高度。*/
    height: number;
    /**
     * 创建一个 <code>Rectangle</code> 对象。
     * @param	x 矩形左上角的 X 轴坐标。
     * @param	y 矩形左上角的 Y 轴坐标。
     * @param	width 矩形的宽度。
     * @param	height 矩形的高度。
     */
    constructor(x?: number, y?: number, width?: number, height?: number) { };
    /** 此矩形右侧的 X 轴坐标。 x 和 width 属性的和。*/
    get right(): number { return null };
    /** 此矩形底端的 Y 轴坐标。y 和 height 属性的和。*/
    get bottom(): number { return null };
    /**
     * 将 Rectangle 的属性设置为指定值。
     * @param	x	x 矩形左上角的 X 轴坐标。
     * @param	y	x 矩形左上角的 Y 轴坐标。
     * @param	width	矩形的宽度。
     * @param	height	矩形的高。
     * @return	返回属性值修改后的矩形对象本身。
     */
    setTo(x: number, y: number, width: number, height: number): Rectangle { return null };
    /**
     * 复制 source 对象的属性值到此矩形对象中。
     * @param	sourceRect	源 Rectangle 对象。
     * @return	返回属性值修改后的矩形对象本身。
     */
    copyFrom(source: Rectangle): Rectangle { return null };
    /**
     * 确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。
     * @param x	点的 X 轴坐标值（水平位置）。
     * @param y	点的 Y 轴坐标值（垂直位置）。
     * @return	如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
     */
    contains(x: number, y: number): boolean { return null };
    /**
     * 确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。
     * @param	rect Rectangle 对象。
     * @return	如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。
     */
    intersects(rect: Rectangle): boolean { return null };
    /**
     * 如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。
     * @param rect	待比较的矩形区域。
     * @param out	（可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。
     * @return	返回相交的矩形区域对象。
     */
    intersection(rect: Rectangle, out?: Rectangle): Rectangle { return null };
    /**
     * <p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>
     * <p>注意：union() 方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle = new Rectangle(300,300,50,0);</p>
     * @param	要添加到此 Rectangle 对象的 Rectangle 对象。
     * @param	out	用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。
     * @return	充当两个矩形的联合的新 Rectangle 对象。
     */
    union(source: Rectangle, out?: Rectangle): Rectangle { return null };
    /**
     * 返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
     * @param out	（可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。
     * @return Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
     */
    clone(out?: Rectangle): Rectangle { return null };
    /**
     * 当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。
     */
    toString(): string { return null };
    /**
     * 检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。
     * @param	rect 待比较的 Rectangle 对象。
     * @return	如果判断的属性都相等，则返回 true ,否则返回 false。
     */
    equals(rect: Rectangle): boolean { return null };
    /**
     * <p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>
     * <p>此方法会修改本对象。</p>
     * @param x	点的 X 坐标。
     * @param y	点的 Y 坐标。
     * @return 返回此 Rectangle 对象。
     */
    addPoint(x: number, y: number): Rectangle { return null };
    /**
     * @private
     * 返回包含所有点的最小矩形。
     * @param pointList 点列表。
     * @return 包含所有点的最小矩形矩形对象。
     */
    static _getWrapRec(pointList: Array<any>, rst?: Rectangle): Rectangle { return null };
    /**
     * 确定此 Rectangle 对象是否为空。
     * @return 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。
     */
    isEmpty(): boolean { return null };
}
/**
 * 延迟n帧后执行
 * @param func 执行的方法 
 * @param frame 延迟的帧数
 * @return [string] 标识
 */
function setFrameout(func: Function, frame: number, ...arg): string { return null; }
/**
 * 清理延迟n帧执行的函数
 * @param sign 
 */
function clearFrameout(sign: string): void { }