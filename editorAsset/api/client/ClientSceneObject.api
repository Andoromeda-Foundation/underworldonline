/**
 * 场景显示对象
 * 【显示层次】
 * -- 动画层：底层
 * -- 自定义底层（含Avatar）
 * -- 动画层：高层
 * -- 自定义高层
 * 
 * Created by 黑暗之神KDS on 2018-07-24 02:06:28.
 */
class ClientSceneObject extends SceneObject {
    /**
     * 是否已卸载
     */
    isDisposed: boolean;
    /**
     * 是否在场景上
     */
    inScene: boolean;
    /**
     * 坐标
     */
    protected _x:number;
    protected _y:number;
    /**
     * 玩家
     */
    player: Player;
    /**
     * 显示对象根容器
     */
    root: GameSprite;
    /**
     * 影子
     */
    shadow: GameSprite;
    /**
     * 底层动画层
     */
    animationLowLayer: GameSprite;
    /**
     * 行走图层
     */
    avatar: Avatar;
    /**
     * 模型对象预设层
     */
    customLayer: GameSprite;
    /**
     * 高层动画层
     */
    animationHighLayer: GameSprite;
    /**
     * 模型对象预设高层（预设中比Avatar更高的层次）
     */
    customHighLayer: GameSprite;
    /**
     * 所属的场景
     */
    scene: ClientScene;
    /**
     * 状态
     */
    get state_isJumping(): boolean { return null; };
    // 更改移动状态
    get state_isMoving(): boolean { return null; };
    /**
     * 上次所在的格子，通过refreshCoordinate刷新计算而来
     */
    posGrid: Point = new Point(-1, -1);
    /** 辅助计算用 */
    protected posHelper: Point = new Point();
    /** 辅助计算用 */
    protected tempPosHelper: Point = new Point();
    //------------------------------------------------------------------------------------------------------
    // 构造
    //------------------------------------------------------------------------------------------------------
    constructor(soData: SceneObject=null, scene: ClientScene=null) {
        super();
    }
    /**
     * 释放
     */
    dispose() {

    }
    //------------------------------------------------------------------------------------------------------
    // 功能和行为
    //------------------------------------------------------------------------------------------------------
    /**
     * 根据动作索引播放动作
     * @return [number] 
     */
    actionIndex:number;
    /**
     * 刷新
     * @param _nowTime unix时间戳
     */
    update(_nowTime: number) {

    }
    /**
     * 重新绘制影子
     * @param scalePer [可选] 默认值=1.0 缩放
     */
    protected refreshShadow(scalePer: number = 1.0){
        
    }
    /**
     * 刷新影子，更新坐标
     */
    protected updateShadow() {

    }
    /**
     * 进入新的坐标后进行一些刷新
     * 场景对象修改坐标、跳跃、移动、设置坐标等会调用此方法
     * @param refreshCamera [可选] 默认值=true 是否刷新镜头
     * @param refreshShadow [可选] 默认值=true 刷新阴影
     * @param refreshGridPos [可选] 默认值=true 刷新格子坐标
     * @param refreshDynamicObs [可选] 默认值=true 刷新碰撞和场景动态障碍信息
     * @param refreshMask [可选] 默认值=true 刷新遮罩显示
     */
    refreshCoordinate(refreshCamera: boolean = true, refreshShadow: boolean = true, refreshGridPos: boolean = true, refreshDynamicObs: boolean = true, refreshMask: boolean = true) {

    }
    //------------------------------------------------------------------------------------------------------
    // 动画
    //------------------------------------------------------------------------------------------------------
    /**
     * 播放动画
     * 
     * @param aniID 动画编号
     * @param loop 是否循环播放
     * @param isHit 是否显示被击效果
     */
    playAnimation(aniID: number, loop: boolean, isHit: boolean) {

    }

    /**
     * 停止动画
     * 
     * @param aniID 动画编号
     */
    stopAnimation(aniID: number) {

    }

    /**
     * 停止所有动画
     */
    stopAllAnimation() {

    }
    //------------------------------------------------------------------------------------------------------
    // 事件
    //------------------------------------------------------------------------------------------------------
    /**
     * 检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。
     * @param	type 事件的类型。
     * @return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。
     */
    hasListener(type: string): boolean { return null };
    /**
     * 派发事件。
     * @param type	事件类型。
     * @param data	（可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。
     * @return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。
     */
    event(type: string, data?: any): boolean { return null };
    /**
     * 使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。
     * @param type		事件的类型。
     * @param caller	事件侦听函数的执行域。a
     * @param listener	事件侦听函数。
     * @param args		（可选）事件侦听函数的回调参数。
     * @return 此 EventDispatcher 对象。a
     */
    on(type: string, caller: any, listener: Function, args?: Array<any>): EventDispatcher { return null };
    /**
     * 使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。
     * @param type		事件的类型。
     * @param caller	事件侦听函数的执行域。
     * @param listener	事件侦听函数。
     * @param args		（可选）事件侦听函数的回调参数。
     * @return 此 EventDispatcher 对象。
     */
    once(type: string, caller: any, listener: Function, args?: Array<any>): EventDispatcher { return null };
    /**
    * 从 EventDispatcher 对象中删除侦听器。
    * @param type		事件的类型。
    * @param caller	事件侦听函数的执行域。
    * @param listener	事件侦听函数。
    * @param onceOnly	（可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。
    * @return 此 EventDispatcher 对象。
    */
    off(type: string, caller: any, listener: Function, onceOnly?: boolean): EventDispatcher { return null };
    /**
     * 从 EventDispatcher 对象中删除指定事件类型的所有侦听器。
     * @param type	（可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。
     * @return 此 EventDispatcher 对象。
     */
    offAll(type?: string): EventDispatcher { return null };
}