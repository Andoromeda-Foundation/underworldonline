/**
 * 回调方法
 * Created by 黑暗之神KDS
 */
class Callback {
    /**
     * 调用者执行域
     */
    caller: any;
    /**
     * 回调方法
     */
    callbackFunc: Function;
    /**
     * 回调参数
     */
    args: any[];
    /**
     * 运行
     * @param addArgs [可选] 默认值=null 追加的参数 
     */
    run(): any {
       return null;
    }
    /**
     * 运行追加额外的参数 追加的参数在回调时总是在后面
     * @param addArgs  追加的参数 
     */
    runWith(addArgs: any[]): any {
        return null;
    }
    /**
     * 延迟执行
     * @param delay 延迟的ms数
     * @param delayFunc [可选] 默认值=null 延迟使用的函数，默认setTimeout，可更换
     * @param args [可选] 默认值=null 参数
     * @return [Callback] 
     */
    delayRun(delay: number, delayFunc: Function = null, args: any[] = null): Callback {
        return null;
    }
    /**
     * 延迟执行，但会覆盖掉之前的延迟
     * @param delay 延迟的ms数
     * @param delayFunc [可选] 默认值=null 延迟使用的函数，默认setTimeout，可更换
     * @param clearDelayFunc [可选] 默认值=null 清理的延迟函数，默认 clearTimeout，可更换
     * @param args [可选] 默认值=null 参数
     * @return [Callback] 
     */
    delayRunConver(delay: number, delayFunc: Function = null, clearDelayFunc: Function = null, args: any[] = null): Callback {
        return null;
    }
    /**
     * 停止延期
     */
    stopDealy(clearDelayFunc: Function = null) {
       return null;
    }
    /**
     * 新建
     * @param callbackFunc 回调方法
     * @param caller 作用域
     * @param args [可选] 默认值=null 参数
     * @return [Callback] 
     */
    static New(callbackFunc: Function, caller: any, args: any[] = null): Callback {
        return null;
    }
    /**
     * 延迟到下一帧执行，保证相同的方法和作用域只能执行一次，可用于优化效率
     * 相同的方法和作用域调用此方法，只有第一次生效
     * @param func 执行的方法
     * @param caller 作用域
     * @param args [可选] 默认值=null 附带的参数 
     */
    static CallLater(func: Function, caller: any,args:any[]=null) {
        
    }
}