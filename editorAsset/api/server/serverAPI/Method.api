/**
 * Created by kds on 2017/1/8 04:35:12
 * 通用的方法
 */
/**
 * [!]获取当前服务端的进程PID
 * @return Number
 */
function getPID():number{
    // c++ Implement
}
/**
 * [!]获得当前服务端程序占用的系统内存
 * @return 返回内存占用，单位：KB
 */
function getMemory():number{
 // c++ Implement
}
/**
 * [!]获得当前服务端程序占用的CPU资源
 * 需要等待200ms左右才能计算出，所以一般不要放在逻辑线程中使用以免阻塞
 * @param pid 可选参数，不输入则表示该应用程序，否则就检查指定的PID的CPU占用率
 * @return 返回内存占用，单位：KB
 */
function getCPU(pid:number):number{
  // c++ Implement
}
/**
 * [!]获取当前系统的CPU占有率
 * 需要等待500ms左右才能计算出，所以一般不要放在逻辑线程中使用以免阻塞
 * @return n 如5则表示当前已使用5%
 */
function getSystemCpuState():number{
    // c++ Implement
}
/**
 * [!]启动服务端
 * @param params 传入的参数 如 -t -s -z
 * @return 启动的程序的PID
 */
function openServer(params:string):number{
    // c++ Implement
}
/**
 * [!]关闭服务端
 * @param params 传入的参数 如 -t -s -z
 * @return 是否正确的关闭了服务端 1=是的 0=否
 */
function closeServer(pid:number):number{
    // c++ Implement
}
/**
 * 返回启动至目前为止的微秒数
 * @return 微秒(String)
 */
function getTimerMicrosecond():string{
    // c++ Implement
}
/**
 * MD5加密
 * @param arg 可输入多个参数
 */
function md5(str:string):string{
 // c++ Implement
}
/**
 * 输出控制台
 * @param arg 可输入多个参数
 */
function trace(...arg):void{
 // c++ Implement
}
/**
 * 在try catch 中当异常时执行此项可显示堆栈信息，否则默认
 * 将只报告错误所在行 如
 * try{
 *   // 错误的代码
 * }catch(e){
 *   traceError(e);
 * }
 * @param arg 可输入多个参数
 */
function traceError(e:Error):void{
 
}
/**
 * 兼容用的定时器 一般用于当前线程的主循环
 * 为了同步MAC和WINDOWS上的表现
 * 否则自行使用while和delay将会在MAC上效果不正确
 */
function whileFunc(func:Function,ms:number):void{
}
/**
 * 等待X毫秒（仅WINDOWS环境下可用）
 * @param ms 可以输入的毫秒数
 */
function delay(ms:number):void{
    // c++ Implement
}
/**
 * 端口是否被占用
 * @param ms 可以输入的毫秒数
 */
function portOccupy(port:number):boolean{
	// c++ Implement
}
/**
 * 执行C++的system
 * @param param 参数，如 pause
 */
function callSystem(param:string):boolean{
	// c++ Implement
}
/**
 * 是否MACOS环境
 */
var isMacOS:boolean;
/** 全局作用域 */
var globalThis;