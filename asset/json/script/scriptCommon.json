{
    "title": [
        "BattleSceneInfo",
        "BattleTimeInfo",
        "BattleData",
        "BattleHandler"
    ],
    "src": [
        "/**\r\n * 对战场景信息\r\n */\r\nclass BattleSceneInfo {\r\n    sceneID:number;\r\n}",
        "class BattleTimeInfo {\r\n    /**\r\n     * 回合花费的时间\r\n     */\r\n    turnCostTime: number;\r\n    /**\r\n     * 玩家剩余时间\r\n     */\r\n    playerRestTime: number[] = [];\r\n    /**\r\n     * 当前是谁的回合\r\n     */\r\n    whoseTurn: number;\r\n    /**\r\n     * 客户端获取到后的时间\r\n     */\r\n    clientTime: number;\r\n}",
        "/**\r\n * 对战数据\r\n */\r\nclass BattleData {\r\n    /**\r\n     * 玩家剩余时间\r\n     */\r\n    playerRestTime: number[] = [];\r\n    /**\r\n     * 回合开始时间\r\n     */\r\n    turnStartTime: number = new Date().getTime();\r\n    /**\r\n     * 玩家是否只剩回合时间\r\n     */\r\n    playerInTurnTime: boolean[] = [];\r\n    /**\r\n     * 静止的时间\r\n     */\r\n    pauseTime: number;\r\n    /**\r\n     * 当前回合的玩家编号\r\n     */\r\n    playerInTurnIndex: number;\r\n    /**\r\n     * 当前行动中的玩家编号\r\n     */\r\n    playerActingIndex: number;\r\n    /**\r\n     * 玩家人数\r\n     */\r\n    playerNumer:number;\r\n}",
        "//=======================================\r\n//              战场处理器\r\n//=======================================\r\nclass BattleHandler {\r\n    /**\r\n     * 【事件】自动进入下回合\r\n     */\r\n    static EVENT_AUTO_INTO_NEXT_STEP: string = \"BattleHandlerEVENT_AUTO_INTO_NEXT_STEP\";\r\n    /**\r\n     * 【阶段】对局\r\n     */\r\n    static STAGE_BATTLE: number = 0;\r\n    /**\r\n     * 【阶段】结束\r\n     */\r\n    static STAGE_END: number = 1;\r\n    /**\r\n     * 初始总时间\r\n     */\r\n    static TOTAL_TIME: number = 10 * 60 * 1000;\r\n    /**\r\n     * 初始总时间耗尽后使用的每回合时间\r\n     */\r\n    static TURN_TIME: number = 30 * 1000;\r\n    /**\r\n     * 战场数据\r\n     */\r\n    data: BattleData = new BattleData();\r\n    /**\r\n     * 检查时间超出的标志\r\n     */\r\n    private checkTimeoutInterval;\r\n    /**\r\n     * 阶段步骤\r\n     */\r\n    stageStep: number = BattleHandler.STAGE_BATTLE;\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        // this.\r\n    }\r\n    /**\r\n     * 当前是谁的回合\r\n     */\r\n    get whoseTurn(): number {\r\n        return this.data.playerInTurnIndex;\r\n    }\r\n    /**\r\n     * 当前是谁在行动\r\n     */\r\n    get whoisActing(): number {\r\n        return this.data.playerActingIndex;\r\n    }\r\n    /**\r\n     * 创建新的战场信息\r\n     */\r\n    // createNewBattleInfo()\r\n\r\n    /**\r\n     * 进入新的回合\r\n     */\r\n    enterNewTurn() {\r\n        // 定义变量\r\n        let whoseTurn: number = this.whoseTurn;\r\n        let currentTime = new Date().getTime(); // 当前时间\r\n        let lastTime: number = currentTime - this.data.turnStartTime; // 持续时长\r\n        // 减去已经过去的时间\r\n        this.data.playerRestTime[whoseTurn] -= lastTime;\r\n        // 回合开始的时间\r\n        this.data.turnStartTime = currentTime;\r\n        // 总时间用完的情况下，赋予回合时间\r\n        if (this.data.playerInTurnTime[whoseTurn]) {\r\n            this.data.playerRestTime[whoseTurn] = BattleHandler.TURN_TIME;\r\n        }\r\n        // 检查时间超出\r\n        this.checkTimeOut();\r\n    }\r\n    /**\r\n     * 检查时间是否超出\r\n     */\r\n    private checkTimeOut() {\r\n        // 定义变量\r\n        let whoseTurn = this.whoseTurn;\r\n        let time: number = this.data.playerRestTime[whoseTurn];\r\n        // 清空原延时\r\n        if (this.checkTimeoutInterval) clearTimeout(this.checkTimeoutInterval);\r\n        // 设置新延时\r\n        this.checkTimeoutInterval = setTimeout((whoseTurn) => {\r\n            if (this.data.playerInTurnTime[whoseTurn]) { // 之前就已经只剩回合时间的情况\r\n                // 进入新的回合\r\n                this.enterNewTurn();\r\n            }\r\n            else { // 刚刚用完总时间的情况\r\n                // 设置当前回合玩家只剩回合时间\r\n                this.data.playerInTurnTime[whoseTurn] = true;\r\n                // 重新设置剩余时间\r\n                this.data.playerRestTime[whoseTurn] = BattleHandler.TURN_TIME;\r\n                // 再次检查时间是否超出\r\n                this.checkTimeOut();\r\n            }\r\n        }, time);\r\n    }\r\n\r\n\r\n}"
    ],
    "bin": [
        "var BattleSceneInfo = (function () {\n    function BattleSceneInfo() {\n    }\n    return BattleSceneInfo;\n}());\n",
        "var BattleTimeInfo = (function () {\n    function BattleTimeInfo() {\n        this.playerRestTime = [];\n    }\n    return BattleTimeInfo;\n}());\n",
        "var BattleData = (function () {\n    function BattleData() {\n        this.playerRestTime = [];\n        this.turnStartTime = new Date().getTime();\n        this.playerInTurnTime = [];\n    }\n    return BattleData;\n}());\n",
        "var BattleHandler = (function () {\n    function BattleHandler() {\n        this.data = new BattleData();\n        this.stageStep = BattleHandler.STAGE_BATTLE;\n    }\n    Object.defineProperty(BattleHandler.prototype, \"whoseTurn\", {\n        get: function () {\n            return this.data.playerInTurnIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BattleHandler.prototype, \"whoisActing\", {\n        get: function () {\n            return this.data.playerActingIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BattleHandler.prototype.enterNewTurn = function () {\n        var whoseTurn = this.whoseTurn;\n        var currentTime = new Date().getTime();\n        var lastTime = currentTime - this.data.turnStartTime;\n        this.data.playerRestTime[whoseTurn] -= lastTime;\n        this.data.turnStartTime = currentTime;\n        if (this.data.playerInTurnTime[whoseTurn]) {\n            this.data.playerRestTime[whoseTurn] = BattleHandler.TURN_TIME;\n        }\n        this.checkTimeOut();\n    };\n    BattleHandler.prototype.checkTimeOut = function () {\n        var _this = this;\n        var whoseTurn = this.whoseTurn;\n        var time = this.data.playerRestTime[whoseTurn];\n        if (this.checkTimeoutInterval)\n            clearTimeout(this.checkTimeoutInterval);\n        this.checkTimeoutInterval = setTimeout(function (whoseTurn) {\n            if (_this.data.playerInTurnTime[whoseTurn]) {\n                _this.enterNewTurn();\n            }\n            else {\n                _this.data.playerInTurnTime[whoseTurn] = true;\n                _this.data.playerRestTime[whoseTurn] = BattleHandler.TURN_TIME;\n                _this.checkTimeOut();\n            }\n        }, time);\n    };\n    BattleHandler.EVENT_AUTO_INTO_NEXT_STEP = \"BattleHandlerEVENT_AUTO_INTO_NEXT_STEP\";\n    BattleHandler.STAGE_BATTLE = 0;\n    BattleHandler.STAGE_END = 1;\n    BattleHandler.TOTAL_TIME = 10 * 60 * 1000;\n    BattleHandler.TURN_TIME = 30 * 1000;\n    return BattleHandler;\n}());\n"
    ]
}